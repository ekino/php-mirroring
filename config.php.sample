<?php

/**
 * Replace the current github reference by another git mirror server
 *
 * @param string $url
 *
 * @return string
 */
function replace_source_host($url) 
{
    return str_replace(
        array('https://github.com', 'http://github.com', 'git://github.com'), 
        'git@git.mycompany.com:/mirrors/github.com', 
        $url
    );
}

/**
 * Replace the current github download option by another http mirror server
 *
 * @param array $metadata
 */
function replace_dist_host(array $metadata)
{
    list($vendor, $name) = explode("/", $metadata['name']);

    if (!preg_match('@(https://api.github.com/repos/|https://github.com/|https://bitbucket.org)([a-zA-Z0-9_\-\.]*)/([a-zA-Z0-9_\-\.]*)/(zipball|archive|get)/([a-zA-Z0-9\.\-]*)(|.zip)@', $metadata['dist']['url'], $matches)) {
        return '';
    }

    return sprintf('https://packagist.mycompany.com/cache.php/github.com/%s/%s/%s.zip',
        $matches[2],
        $matches[3],
        $metadata['dist']['reference']
    );
}

/**
 * Return true if you want to include the dist array 
 * The dist array is used to download the archive version (zip)
 *
 * @return boolean
 */
function include_dist() 
{
    return true;
}

/**
 * Return true if you want to include the source array 
 * The source array is used to download from git/subversion
 *
 * @return boolean
 */
function include_source()
{
    return true;
}

/**
 * Return the path to the github location 
 *
 * @return string
 */
function get_repository_path()
{
    return '/git/repositories/mirrors/mirrors/github.com';
}

/**
 * Create parse an url and return information parameter => vendor / package / version
 */
function build_parameters($url)
{
    if (!preg_match('@/github.com/([a-zA-Z0-9\-\.]*)/([a-zA-Z0-9\-\.]*)/([a-zA-Z0-9\-\.]*).zip@', $url, $matches)) {
        throw new Exception("Unable to parse the request");
    }

    return array(
        'package' => $matches[1].'/'.$matches[2],
        'version' => $matches[3],
        'vendor'  => $matches[1],
        'name'    => $matches[2]
    );
}
